// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: pg-query.sql

package pgstore

import (
	"context"
)

const allLinks = `-- name: AllLinks :many
SELECT base,
    url
FROM links
WHERE deleted_at IS NULL
`

type AllLinksRow struct {
	Base string
	Url  string
}

func (q *Queries) AllLinks(ctx context.Context) ([]AllLinksRow, error) {
	rows, err := q.db.Query(ctx, allLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllLinksRow
	for rows.Next() {
		var i AllLinksRow
		if err := rows.Scan(&i.Base, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteLink = `-- name: DeleteLink :exec
UPDATE links
SET deleted_at = now()
WHERE base = $1
`

func (q *Queries) DeleteLink(ctx context.Context, base string) error {
	_, err := q.db.Exec(ctx, deleteLink, base)
	return err
}

const findLink = `-- name: FindLink :one
SELECT url
FROM links
WHERE base = $1
    AND deleted_at IS NULL
`

func (q *Queries) FindLink(ctx context.Context, base string) (string, error) {
	row := q.db.QueryRow(ctx, findLink, base)
	var url string
	err := row.Scan(&url)
	return url, err
}

const upsertLink = `-- name: UpsertLink :exec
INSERT INTO links (base, url)
VALUES ($1, $2) ON conflict (base) DO
UPDATE
SET url = $2,
    updated_at = now(),
    deleted_at = NULL
`

type UpsertLinkParams struct {
	Base string
	Url  string
}

func (q *Queries) UpsertLink(ctx context.Context, arg UpsertLinkParams) error {
	_, err := q.db.Exec(ctx, upsertLink, arg.Base, arg.Url)
	return err
}
